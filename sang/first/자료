2. 문자열

C++언어에서 문자열은 데이터 타입으로 보고 본격적으로 지원한다. C++ 에서는 문자열을 클래스 객체로 지원하며
템플릿과 연산자 오버로딩을 통해 구현하고 있다.

C에서는 Null문자가 문자열의 끝임을 체크 null문자는 NUL 로 NULL이 아니다. NUL 문자는 NULL포인터랑 다르다.
C에서 사용하는 테크닉을 C++에서 사용하지 말자

C에서 Null문자 공백을 주지 않아서 발생하는 문제점에 대해서 설명, Strcpy, Strcat 함수 주의해야하는 예 (생략)

문자형 리터럴 "string" 이렇게 변수에 대입하지 않는 문자열, 읽기전용 메모리에 상주. 

char* ptr = "hello"
ptr[1] = 'a'; 

하지말자

const char* ptr = "hello"
ptr[1] = 'a'; 

이거는 ??

char arr[] = "hello";
arr[1] = 'a';


C++ String Class -> Java처럼 할수 있다.

String A("12");
String D("12");
String B("34");
String C;

1. C = A + B // C = "1234" 연산자오버로딩
2. A += B; 이거는 // A = "1234"

그렇다면 

A == B 의 값은 ?
예제 ) string.cpp
예제 ) string2.cpp


2.1.3.3 std::string 리터럴

auto string = "Hello World" // string1 의 타입은 cons char* 가 된다.
auto string2= "Hello World"s //string2의 타입은 std::string 이 된다.





2.1.3.4 수치변환 함수

수치 -> 문자열

string to_string(int val);
string to_string(unsigned val);
...

string to_string (double val);
# Java String 과 비슷

문자열 -> 수치

stoi ( string to int )
stol ( string to long)
stoul( string to unsigned long)
stoll (long long )
stoull ( unsigned long long )
stof ( string to float)
stod ( string to double)

2.14 이스캐이프 시퀀스
" Hello "!" "  컴파일 에러
" Hello \"!\" " 이렇게 해야됨
그런데 더 좋은 방식은 string str = R"(Hello World"!")"; 이거는 됨
R은 여러줄에 대해서도 가능

String str = R"(Line 1
Line 2 with \t)";
		
출력하면 ???




3. 보기 좋은 코드의 중요성
결론 : 중요하다

3.2. 코드의 문서화

3.2.1 주석을 작성해야하는 이유
3.2.1.1 사용법을 설명해야하는 주석
3.2.1.2 복잡한 코드를 설명하기 위한 주석
3.2.1.3 메타정보를 제공하기 위한 주석
코드의 개별적인 설명보다는 코드가 생성된 배경에 대하여 설명
3.2.2 주석스타일
3.2.2.1 모든라인마다 주석달기 -> 코드가 지저분해지므로 피하자!
3.2.2.2 머리말주석
최종 수정날짜, 원저작자, 변경이력, 이 파일에서 구현하고 있는 기능의 관리, 저작권 정보, 미구현 기능,
파일 클래스 개요, 알려진 버그
3.2.2.3 고정 양식 주석
Doxygen 규약에 맞추어 주석을 작성하면 HTML, UNIX man, Pdf로 문서를 생성해줌 -> 대규모 프로젝트에 이용
3.2.2.4 즉시 주석
의미가 명확하지 않는 API는 설명정보를 추가
3.2.2.5 그 자체로 이해가 충분한 코드
주석을 피하자

3.3 코드 분할
정설은 없지만 함수의 크기가 1/4을 넘지 않는 것이 좋다는 의견도 있고, 특정 블록이 너무 밀집해 있지 않은지를 본다.
3.3.1 리팩토링을 통한 분할
재구성하는 것, 타입을 일반적으로하고, 필드 맴버를 캡슐화등등..

3.4 네이밍
gSetting = 전역변수임을 암시해준다.
i,j 를 사용하는데 중첩문에서는 outterLoopIndex, innerLoopIndex이렇게 명확한 이름을 사용하는 사람들도 있다.

mData      -> 멤버변수
_m_Data    -> 멤버변수

s	   -> 스태틱 변수
ms	   -> 스태틱 변수
ms_	   -> 스태틱 변수

k	kMaximumLength -> (c)konstant 상수

b	-> 논리형
is	-> 논리형

n	-> number
mNum	-> number

3.4.2.6 헝가리안 표기법
마이크로소프트 윈도우 프로그래머가 많이 사용
char *pszName  //psz는 Pointer String Zero-Terminated 
헝가리인 이유? 헝가리사람이 만듬..
그런데 많은 사람들이 이 표기법을 싫어함..



